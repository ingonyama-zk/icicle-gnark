package tests

import (
	"testing"

	{{.Field}} "github.com/ingonyama-zk/icicle/v3/wrappers/golang/{{.BaseImportPath}}"
	"github.com/ingonyama-zk/icicle/v3/wrappers/golang/core"
	"github.com/ingonyama-zk/icicle/v3/wrappers/golang/{{.BaseImportPath}}/vecOps"
	"github.com/stretchr/testify/suite"
)

func test{{capitalize .Field}}VecOps(suite *suite.Suite) {
	testSize := 1 << 14

	a := {{.Field}}.GenerateScalars(testSize)
	b := {{.Field}}.GenerateScalars(testSize)
	var scalar {{.Field}}.{{.FieldPrefix}}Field
	scalar.One()
	ones := core.HostSliceWithValue(scalar, testSize)

	out := make(core.HostSlice[{{.Field}}.{{.FieldPrefix}}Field], testSize)
	out2 := make(core.HostSlice[{{.Field}}.{{.FieldPrefix}}Field], testSize)
	out3 := make(core.HostSlice[{{.Field}}.{{.FieldPrefix}}Field], testSize)

	cfg := core.DefaultVecOpsConfig()

	vecOps.VecOp(a, b, out, cfg, core.Add)
	vecOps.VecOp(out, b, out2, cfg, core.Sub)

	suite.Equal(a, out2)

	vecOps.VecOp(a, ones, out3, cfg, core.Mul)

	suite.Equal(a, out3)
}

type {{capitalize .Field}}VecOpsTestSuite struct {
	suite.Suite
}

func (s *{{capitalize .Field}}VecOpsTestSuite) Test{{capitalize .Field}}VecOps() {
	s.Run("Test{{capitalize .Field}}VecOps", testWrapper(&s.Suite, test{{capitalize .Field}}VecOps))
}

func TestSuite{{capitalize .Field}}VecOps(t *testing.T) {
	suite.Run(t, new({{capitalize .Field}}VecOpsTestSuite))
}